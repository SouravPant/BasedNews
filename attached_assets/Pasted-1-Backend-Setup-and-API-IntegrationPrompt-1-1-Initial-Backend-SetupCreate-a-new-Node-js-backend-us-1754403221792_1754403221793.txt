1. Backend Setup and API IntegrationPrompt 1.1: Initial Backend SetupCreate a new Node.js backend using the Express framework. Set up a basic server structure with routes for handling API requests. Install necessary packages like axios for making HTTP requests and cors for handling cross-origin requests.Prompt 1.2: Crypto Data API IntegrationIntegrate the CoinGecko API to fetch real-time price data for the top 100 cryptocurrencies. Create an API endpoint /api/coins that returns a list of the top 100 coins with their current price, 24-hour change, volume, and market cap.Prompt 1.3: News API IntegrationIntegrate the Crypto News API (or a similar news API) to fetch the latest cryptocurrency news. Create an API endpoint /api/news that returns a list of recent news articles, including the title, source, and a link to the original article.2. Wallet Integration and Portfolio FeaturesPrompt 2.1: Wallet ConnectionUsing the Base App SDK or a similar library like RainbowKit, implement a wallet connection feature on the frontend. The 'Connect Wallet' button should trigger a modal that allows users to connect their Base wallet.Prompt 2.2: Fetching Wallet BalanceOnce a wallet is connected, create a backend endpoint /api/portfolio that takes a wallet address as a parameter. This endpoint should use a library like Ethers.js or Web3.js to fetch the balance of different tokens in the user's wallet. For each token, retrieve the quantity and contract address.Prompt 2.3: Displaying Portfolio ValueOn the frontend, after connecting a wallet, call the /api/portfolio endpoint to get the user's token balances. Then, use the real-time price data from the /api/coins endpoint to calculate and display the total value of the user's portfolio and the value of each individual holding.3. AI-Powered News SummarizationPrompt 3.1: Summarization ServiceCreate a new backend service for news summarization. This service will have an endpoint /api/summarize that accepts a URL of a news article as a parameter. Inside this endpoint, use a library like axios to fetch the content of the article. Then, use the OpenAI API (or another summarization API) to generate a 100-word summary of the article's content.Prompt 3.2: Frontend IntegrationOn the frontend, for each news article displayed, add a 'Summarize' button. When this button is clicked, call the /api/summarize endpoint with the article's URL. Display the returned summary in a modal or an expandable section below the article.4. UI/UX EnhancementsPrompt 4.1: Personalized DashboardCreate a new 'Dashboard' page that is displayed after a user connects their wallet. This dashboard should provide an overview of their portfolio value, a list of their top holdings, and a feed of the latest news. Allow users to customize the layout of their dashboard.Prompt 4.2: Responsive DesignReview the entire application and ensure that all components are fully responsive and provide a good user experience on both desktop and mobile devices. Use CSS media queries to adjust the layout for different screen sizes.5. Base Mini App ConfigurationPrompt 5.1: Mini App ManifestCreate the necessary configuration file for a Base Mini App. In the root of your project, add a .well-known/farcaster directory and create a manifest.json file inside it. Populate the manifest with the required information, such as the app's name, icon, and entry point.These prompts should provide a clear roadmap for developing the enhanced features in Replit. Each prompt can be used as a starting point for a development session, and the resulting code can be built upon in subsequent sessions.